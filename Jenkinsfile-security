def slackResponse = slackSend(channel: "ci-security", message: "*7.3 plugins - dependency check* - <"+currentBuild.absoluteUrl+"|Link>", color: "#00A8E1")
def job = ""
def errors = []
def running = []


pipeline {
    agent none
    triggers { cron('@daily') }

    stages {
        stage('deps-plugins') {
            //when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'ci/dep-check.Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // and share maven cache
                    args '-v /srv/cache/maven:/home/jenkins/.m2'
                }
            }
            steps {
                script {
                    SCALA_PLUGINS = sh (
                        script: 'make scala-plugins-list',
                        returnStdout: true
                    ).trim().split(' ')
                    SCALA_PLUGINS.each {
                        stage("${it}") {
                            script {
                                running.add("${it}")
                                updateSlack(errors, running, slackResponse)
                            }
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                try {
                                    dir("${it}") {
                                        sh script: 'make generate-pom', label: 'generate pom.xml'
                                        sh script: 'mvn -U -DsuppressionFiles=../dependency-check-suppression.xml -DskipProvidedScope=true -DfailBuildOnCVSS=7 -DcveValidForHours=48 org.owasp:dependency-check-maven:aggregate', label: "check plugins dependencies"
                                        script {
                                            if (fileExists('src/main/package.json')) {
                                                dir("src/main") {
                                                    sh script: 'npm_config_loglevel=error npm ci --no-audit', label: "install dependencies"
                                                    sh script: 'npx better-npm-audit audit --level high', label: "check npm dependencies"
                                                }
                                            }
                                        }
                                        sh script: 'mvn -U license:aggregate-third-party-report', label: 'list ${it} dependencies'
                                    }
                                } catch (exc) {
                                    // Mark the build as failure since it's actually an error
                                    currentBuild.result = 'FAILURE'
                                    errors.add("${it}")
                                    slackSend(channel: slackResponse.threadId, message: "Dependency check error on plugin ${it} - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                                }
                            }
                            script {
                                running.remove("${it}")
                                updateSlack(errors, running, slackResponse)
                            }
                        }
                    }
                }
            }
            post {
                always {
            		archiveArtifacts artifacts: '*/target/dependency-check-report.html, */target/site/aggregate-third-party-report.html'
                }
            }
        }
    }
}

def updateSlack(errors, running , slackResponse) {


def msg ="*7.3 plugins - dependency check* - <"+currentBuild.absoluteUrl+"|Link>"

def color = "#00A8E1"

if (! errors.isEmpty()) {
    msg += "*Errors* :nono: ("+errors.size()+")\n• " + errors.join("\n• ")
    color = "#CC3421"
}
if (! running.isEmpty()) {
    msg += "*Running* :felisk: ("+running.size()+")\n• " + running.join("\n• ")
}

if (errors.isEmpty() && running.isEmpty()) {
    msg +=  ":yesyes: All plugin dependencies checked! :fiesta-parrot:"
	color = "good"
}
  slackSend(channel: slackResponse.channelId, message: msg, timestamp: slackResponse.ts, color: color)
}