#!/usr/bin/env python

import sys, os, time, atexit, signal, configparser
sys.path.insert(0, "/opt/rudder/share/python")
import notify

FIFO_PIPE = "/var/run/rudder-notifyd.fifo"

class Daemon:

    def __init__(self, run, pidfile, stdout="/dev/null", stderr="/dev/null"):
        self.run = run
        self.pidfile = pidfile
        self.stdout = stdout
        self.stderr = stderr
        
    def daemonize(self):
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError as e:
            sys.exit(1)

        os.chdir("/")
        os.setsid()
        os.umask(0)

        # We are spawning a daemon by double-forking
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError as e:
            sys.exit(1)

        sys.stdout.flush()
        sys.stderr.flush()
        sys.stdout = open(self.stdout, 'w')
        sys.stderr = open(self.stderr, 'w')

        # We write a pidfile to keep track of the daemon process, and we make sure it is deleted on exit
        file(self.pidfile, 'w+').write(str(os.getpid()) + '\n')
        handle_exit = lambda : os.remove(self.pidfile)
        signal.signal(signal.SIGTERM, handle_exit)
        atexit.register(handle_exit)

    def start(self):
        try:
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            print("Daemon already running ? Check PID " + str(pid))
            sys.exit(1)

        self.daemonize()
        self.run()

    def stop(self):
        try:
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            print("No pid found. Daemon not running ?")
            return

        try:
            while True: # We'll get out of this with an exception
                os.kill(pid, signal.SIGTERM)
                time.sleep(0.1)
        except OSError as e:
            if str(e).find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)

    def restart(self):
        self.stop()
        self.start()

def start_worker():
    conf = configparser.ConfigParser()
    conf.read("/opt/rudder/etc/notify.conf")
    w = notify.NotifyWorker(FIFO_PIPE, conf)
    w.start()

if __name__ == "__main__":
    
    usage = "Usage:\n    rudder-notifyd start|stop|restart"

    if len(sys.argv) > 1:
        d = Daemon(start_worker, "/var/run/rudder-notifyd.pid")
        if sys.argv[1] == "start":
            d.start()
        elif sys.argv[1] == "stop":
            d.stop()
        elif sys.argv[1] == "restart":
            d.restart()
        else:
            print(usage)
            sys.exit(2)
        sys.exit(0)
    else:
        print(usage)
        sys.exit(2)
