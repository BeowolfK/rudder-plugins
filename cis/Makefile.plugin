.PHONY: ubuntu18 debian9 redhat7 clean halfclean

ubuntu18: OS = ubuntu18
ubuntu18: all

debian9: OS = debian9
debian9: all

redhat7: OS = redhat7
redhat7: all

include ../makefiles/common.mk
# Usage: $(GET) <destination_file> <url> <hash>
PROXY_ENV = $(if $(PROXY), http_proxy=$(PROXY) ftp_proxy=$(PROXY))
# No accept encoding to prevent the webserver form altering the distributed file
# Pass an empty string to skip hash check
# grep 'GET=' */SOURCES/Makefile to patch everywhere
GET=get() { $(PROXY_ENV) curl -s -L -o "$$1.part" "$$2" && { openssl dgst -sha256 "$$1.part" | grep -q "$$3" || { echo "Wrong checksum, aborting"; exit 1; }; } && mv "$$1.part" "$$1"; }; get

all: $(FULL_NAME)-$(VERSION).rpkg

FILES = configuration-repository
SCRIPTS = postinst prerm trackFile.json rudder_synchronize.py
RUDDER_SYNCHRONIZE_SHA256 = e0ba357886ac4b5c6a5856db191371922685a981af0c06596bd4adb8bcbefda1

CONFIG_SOURCE = src/target/configuration

$(FULL_NAME)-$(VERSION).rpkg: target/metadata target/files.txz target/scripts.txz target/configuration.txz
	ar r $(FULL_NAME)-$(VERSION).rpkg target/metadata target/files.txz target/scripts.txz target/configuration.txz

target/scripts.txz: target/packaging/rudder_synchronize.py
	tar cJ -C target/packaging -f target/scripts.txz $(SCRIPTS)

target/files.txz: target/configuration-repository
	tar cJ -C target -f target/files.txz $(FILES)

target/configuration.txz: target/configuration-repository
	tar cJ -C target -f target/configuration.txz rules directives techniques

target/packaging/rudder_synchronize.py:
	cp -ar packaging target/
	sed -i -e "s/{plugin-id\}/cis-$(OS)/g" target/packaging/*
	sed -i -e "s/{category\}/CIS\ $(OS)/g" target/packaging/*
	$(GET) target/packaging/rudder_synchronize.py https://repository.rudder.io/tools/rudder-synchronize $(RUDDER_SYNCHRONIZE_SHA256)
	chmod +x target/packaging/rudder_synchronize.py


target/configuration-repository:
	cd src && make $(OS) && cd -
	cp -ar $(CONFIG_SOURCE)/rules $(CONFIG_SOURCE)/directives $(CONFIG_SOURCE)/techniques target/
	src/tools/trackConfig.py "target" "target/packaging/trackFile.json"
	mkdir -p target/configuration-repository
	cp -ar $(CONFIG_SOURCE)/ncf target/configuration-repository/

halfclean:
	rm -f pom.xml build.conf
	rm -rf target ncf
	rm -rf configuration/rules/*
	rm -rf pdfs
	cd src && make clean

clean: halfclean
	rm -f *.rpkg
