Rudder plugin: Auth Backends
-----------------------------

This project is part of Rudder - Continuous configuration for effective compliance

Rudder is an easy to use, web-driven, role-based solution for IT Infrastructure
Automation & Compliance.

See: http://rudder-project.org for more information.

=== Description

Alternative Authentication Backends for Rudder:

==== LDAP / AD backends

This plugin allows to use LDAP

==== Radius backend

This plugin allows to use a radius authentication.

The configuration is done in the main /opt/ruder/etc/rudder-web.properties
configuration file.

rudder.auth.radius.host.name=192.168.42.80::
IP or hostname of the Radius server. Both work, but it is prefered to use an IP.

rudder.auth.radius.host.authPort=1812::
Authentication port for the Radius server

rudder.auth.radius.host.sharedSecret=secret::
The  shared secret as configured in your Radius server for Rudder application / host.

rudder.auth.radius.auth.timeout::
Time to wait in seconds when trying to connect to the server before giving up.

rudder.auth.radius.auth.retries::
Number of retries to attempt in case of timeout before giving up.

rudder.auth.radius.auth.protocol::
Authentication protocol to use to connect to the Radius server. The default one is 'pap' (PAP).

Available protocols::
- pap
- chap
- eap-md5
- eap-ttls

For `eap-ttls`, you can append `key=value` parameters, separated by `:` to the protocol name to specify protocol option, for example: `eap-tls:keyFile=keystore:keyPassword=mypass`


Here comes a example of config you can copy and past directly:

```
rudder.auth.type=radius
rudder.auth.radius.host.name=192.168.42.80
rudder.auth.radius.host.authPort=1812
rudder.auth.radius.host.sharedSecret=secret
rudder.auth.radius.auth.protocol=pap
rudder.auth.radius.auth.timeout=10
rudder.auth.radius.auth.retries=0
```
