#####################################################################################
# Copyright 2018 Normation SAS
####################################################################################
#
# This file is part of Rudder.
#
# Rudder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# In accordance with the terms of section 7 (7. Additional Terms.) of
# the GNU General Public License version 3, the copyright holders add
# the following Additional permissions:
# Notwithstanding to the terms of section 5 (5. Conveying Modified Source
# Versions) and 6 (6. Conveying Non-Source Forms.) of the GNU General
# Public License version 3, when you create a Related Module, this
# Related Module is not considered as a part of the work and may be
# distributed under the license agreement of your choice.
# A "Related Module" means a set of sources files including their
# documentation that, without modification of the Source Code, enables
# supplementary functions or services in addition to those offered by
# the Software.
#
# Rudder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Rudder.  If not, see <http://www.gnu.org/licenses/>.

#
#####################################################################################


###########################
# Rudder Authentication    #############################################################
###########################

#
# By default, both authentication and authorization are handle in the rudder-users.xml
# file. But you may want to rely on your existing entreprise Active Directory or LDAP
# to take care of the authentication part.
# To choose the scheme to use, either use 'file' or 'ldap' for the rudder.auth.type
# parameter.
# You can also use a comma separated list of authentication provider to use,
# like 'ldap, file' in which case each one will be tested in turned for authentication.
#
# When set to 'ldap', passwords in rudder-users.xml are ignored and the
# authentication is delegated to the LDAP server configured below.
# By convention, when LDAP authentication is enable, 'password' field in
# rudder-users.xml are set to 'LDAP'
#
# Comma separated list of authentication providers.
#
rudder.auth.provider=file


###########################
# LDAP Authentication      #############################################################
###########################


# The following parameters allow to configure the LDAP authentication provider.
# The LDAP authentication procedure is a typical bind/search/rebind, in which
# an application connection (bind) is used to search (search) for an user entry
# given some base and filter parameters, and then, a bind (rebind) is tried on
# that entry with the credential provided by the user.
# That allows to seperate the user DN (especially RDN) from the search criteria.
#
# Be careful, the authorization is still done in the rudder-user.xml, what means
# that each user should have access to Rudder MUST have a line in that file.
# Without that line, the user can have a successful LDAP authentication, but
# won't be able to do or see anything in Rudder (safe logout).
#

#
# Connection URL to the LDAP server, in the form:
# ldap://hostname:port/base_dn
#
rudder.auth.ldap.connection.url=ldap://ldap.mycorp.com:389/dc=mycorp,dc=com

#
# Bind DN used by Rudder to do the search
# LDAP dn, no default value.
#
rudder.auth.ldap.connection.bind.dn=cn=admin,dc=mycorp,dc=com

#
# Bind password used by Rudder to do the search.
# String, no default value.
#
rudder.auth.ldap.connection.bind.password=secret

#
# Search base and filter to use to find the user.
# The search base can be left empty.
# In the filter, {0} denotes the value provided as
# login by the user.
#
rudder.auth.ldap.searchbase=ou=People
rudder.auth.ldap.filter=(&(uid={0})(objectclass=person))

#
# An AD example would be:
#
#rudder.auth.ldap.searchbase=
#rudder.auth.ldap.filter=(&(sAMAccountName={0})(objectclass=user))


###########################
# Radius Authentication    #############################################################
###########################

#
# Use "radius" auth type to enable radius authentication
#
#rudder.auth.type=file,radius

#
# IP or hostname of the Radius server. Both work, but it is prefered to use an IP.
#
rudder.auth.radius.host.name=192.168.42.80

#
# Authentication port for the Radius server
#
rudder.auth.radius.host.authPort=1812

#
# The  shared secret as configured in your Radius server for Rudder application / host.
#
rudder.auth.radius.host.sharedSecret=secret

#
# Time to wait in seconds when trying to connect to the server before giving up.
#
rudder.auth.radius.auth.timeout=10

#
# Number of retries to attempt in case of timeout before giving up.
#
rudder.auth.radius.auth.retries=0

#
# Authentication protocol to use to connect to the Radius server. The default one is 'pap' (PAP).
# Available protocols::
# - pap
# - chap
# - eap-md5
# - eap-ttls
#
# For `eap-ttls`, you can append `key=value` parameters, separated by `:` to the protocol name to
# specify protocol option, for example: `eap-tls:keyFile=keystore:keyPassword=mypass`
#
rudder.auth.radius.auth.protocol=pap


Here comes a example of config you can copy and past directly:
