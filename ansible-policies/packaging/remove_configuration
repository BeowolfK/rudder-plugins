#!/usr/bin/python3

"""
Rudder synchronize

Policy plugin classic prerm control file
Usage:
    prerm <CONFIGURATION_FOLDER> <TRACK_FILE>


CONFIGURATION_FOLDER: path to the folder containing the json imported to Rudder
TRACK_FILE: path to the file used to track all the imported techniques/directives/rules/methods

Usually the track_file is a json containing one key for each element like:

{
  "directives": [
    "452bcaec-faa4-4df2-bb11-7e60adb79075",
    "1affb4e0-606a-4255-bbac-75b6f68118e1",
  ],
  "rules": [
    "83df7ba2-dee9-46c8-827d-47dacc72928d",
    "6dbe508d-1b85-412c-85ad-e8fb7c6ef9e8"
  ],
  "techniques": [
    "Ensure_gpgcheck_is_globally_activated.json",
  ]
}

"""
import json, logging, traceback
import re
import os, sys
import requests
# Hack to import rudder lib, remove, some day ...
sys.path.insert(0, "/opt/rudder/share/python")
import rudder-synchronise as rudder_synchro
import docopt

def canonify(string):
  string = string.encode("utf-8").decode("iso-8859-1")
  regex = re.compile("[^a-zA-Z0-9_]")
  return regex.sub("_", string)

def removeRules(rules):
    answer = None
    for iRule in rules:
        try:
            if iRule in RULES:
                (answer, remove) = rudder_synchro.queryYesNo("Do you want to remove Rule %s? [y/n/Y/N]"%iRule, answer)
                if remove:
                    rudder_synchro.remove_rule(iRule)
                    print(rudder_synchro.colors.GREEN + "Successfully removed rule %s"%iRule + rudder_synchro.colors.ENDC)
                else:
                    print(rudder_synchro.colors.GREEN + "Keeping rule %s"%iRule + rudder_synchro.colors.ENDC)
            else:
                print(rudder_synchro.colors.GREEN + "Could not find rule %s"%iRule + rudder_synchro.colors.ENDC)
        except rudder_synchro.RudderError as e:
            print(rudder_synchro.colors.RED + e.message + rudder_synchro.colors.ENDC)

def removeDirectives(directives):
    answer = None
    for iDirective in directives:
        try:
            if iDirective in DIRECTIVES:
                (answer, remove) = rudder_synchro.queryYesNo("Do you want to remove directive %s? [y/n/Y/N]"%iDirective, answer)
                if remove:
                    rudder_synchro.remove_directive(iDirective)
                    print(rudder_synchro.colors.GREEN + "Successfully removed directive %s"%iDirective + rudder_synchro.colors.ENDC)
                else:
                    print(rudder_synchro.colors.GREEN + "Keeping directive %s"%iDirective + rudder_synchro.colors.ENDC)
            else:
                print(rudder_synchro.colors.GREEN + "Could not find directive %s"%iDirective + rudder_synchro.colors.ENDC)
        except rudder_synchro.RudderError as e:
            print(rudder_synchro.colors.RED + e.message + rudder_synchro.colors.ENDC)

def removeTechniques(techniques):
    answer = None
    for iTechnique in techniques:
        try:
            with open(CONFIGURATION_FOLDER + "/configuration/techniques/" + iTechnique) as f:
                data = json.load(f)["data"]
            techniqueName = data["name"]
            if canonify(techniqueName) in TECHNIQUES:
                (answer, remove) = rudder_synchro.queryYesNo("Do you want to remove Technique %s? [y/n/Y/N]"%techniqueName, answer)
                if remove:
                    rudder_synchro.remove_technique(canonify(techniqueName))
                else:
                    print(rudder_synchro.colors.GREEN + "Keeping technique %s"%iTechnique + rudder_synchro.colors.ENDC)
            else:
                print(rudder_synchro.colors.GREEN + "Could not find technique %s"%techniqueName + rudder_synchro.colors.ENDC)
        except rudder_synchro.RudderError as e:
            print(rudder_synchro.colors.RED + e.message + rudder_synchro.colors.ENDC)

RULES = [iRule["id"] for iRule in rudder_synchro.endpoint.list_rules()["rules"]]
DIRECTIVES = [iDirective["id"] for iDirective in rudder_synchro.endpoint.list_directives()["directives"]]
TECHNIQUES = [iTechnique["name"] for iTechnique in rudder_synchro.endpoint.list_techniques()["techniques"]]

if __name__ == "__main__":
  args = docopt.docopt(__doc__)
  TRACK_FILE_PATH = args['TRACK_FILE']
  CONFIGURATION_FOLDER = args['CONFIGURATION_FOLDER']

  try:
      with open(TRACK_FILE_PATH) as f:
          data = json.load(f)
  except Exception as e:
      print("Could not open %s"%TRACK_FILE_PATH)
      print(e)
      exit(1)

  removeRules(data["rules"])
  removeDirectives(data["directives"])
  removeTechniques(data["techniques"])

